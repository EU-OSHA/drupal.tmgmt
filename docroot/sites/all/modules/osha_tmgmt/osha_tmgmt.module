<?php
/**
 * @file
 * Code for the OSHA Translation Management feature.
 */

include_once 'osha_tmgmt.features.inc';
include_once 'osha_tmgmt.utils.inc';


define('OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE', 'en');
define('OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE', 'ro');
define('OSHA_TMGMT_WORDS_PER_PAGE', 250);

define('OSHA_TMGMT_JOB_PRIORITY_HIGH', 2);
define('OSHA_TMGMT_JOB_PRIORITY_LOW', 1);
define('OSHA_TMGMT_JOB_PRIORITY_NORMAL', 0);

define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired', 5);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated', 6);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish', 7);

function osha_tmgmt_menu() {
  $items = array();
  $items['admin/config/content/osha_tmgmt'] = array(
    'title' => 'EU-OSHA TMGMT',
    'description' => 'Configure the EU-OSHA translation workflow module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_tmgmt_config_form'),
    'access arguments' => array('administer osha tmgmt'),
    'file' => 'osha_tmgmt.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_schema_alter().
 */
function osha_tmgmt_schema_alter(&$schema) {
  if (isset($schema['tmgmt_job_item'])) {
    $schema['tmgmt_job_item']['fields']['target_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'not null' => FALSE,
      'description' => 'The language the data should be translated to.',
    );
    $schema['tmgmt_job_item']['fields']['source_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'default' => '',
      'not null' => FALSE,
      'description' => 'The default entity language',
    );
    $schema['tmgmt_job_item']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job_item']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job_item']['fields']['eid'] = array(
      'description' => 'Translation Validators groups',
      'type' => 'int',
      'unsigned' => TRUE,
      'default' => NULL,
      'not null' => FALSE,
    );

    $schema['tmgmt_job_item']['fields']['vid'] = array(
      'description' => 'Revision Translated',
      'type' => 'int',
      'unsigned' => TRUE,
      'default' => NULL,
      'not null' => FALSE,
    );
    $schema['tmgmt_job_item']['fields']['merged'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => NULL,
      'description' => 'If the translation was merged.',
    );
    $schema['foreign keys']['vid'] = array(
      'table' => 'node_revision',
      'columns' => array('vid' => 'vid'),
    );
    $schema['tmgmt_job_item']['fields']['is_full_translation'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 1,
      'description' => 'FALSE if retranslation, TRUE if full-translation.',
    );
  }
  if (isset($schema['tmgmt_job'])) {
    $schema['tmgmt_job']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job']['fields']['priority'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Urgency of the translation (0=normal/1=high)',
    );
    $schema['tmgmt_job']['fields']['has_file_uploaded'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'If job item has file uploaded.',
    );
    $schema['tmgmt_job']['fields']['file_sent'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'If job item translation file was sent to CDT.',
    );
  }
}


function osha_tmgmt_entity_property_info_alter(&$info) {
  $info['tmgmt_job_item']['properties']['state']['options list'] = '_osha_tmgmt_get_job_item_states';
  $info['tmgmt_job_item']['properties']['target_language'] = array(
    'label' => t("Job Item Target Language"),
    'type' => 'text',
    'description' => t("Job Item Target Language"),
    'options list' => 'entity_metadata_language_list',
    'setter callback' => 'entity_metadata_verbatim_set',
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'target_language',
  );
  $info['tmgmt_job']['properties']['has_file_uploaded'] = array(
    'label' => t("Has File uploaded"),
    'type' => 'boolean',
    'description' => t("If job has a file uploaded"),
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'has_file_uploaded',
  );
  $info['tmgmt_job']['properties']['file_sent'] = array(
    'label' => t("Has File Sent to CDT"),
    'type' => 'boolean',
    'description' => t("If job's file is sent to CDT."),
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'file_sent',
  );
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function osha_tmgmt_tmgmt_file_format_plugin_info() {
  return array(
    'xml' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
    'XML' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
  );
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function osha_tmgmt_tmgmt_translator_plugin_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['plugin controller class'] = 'OSHATMGMTFileTranslatorPluginController';
  }
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function osha_tmgmt_tmgmt_source_plugin_info_alter(&$info) {
  $info['entity']['plugin controller class'] = 'OSHATMGMTEntitySourcePluginController';
  $info['entity']['ui controller class'] = 'OSHATMGMTEntitySourceUIController';
  $info['i18n_string']['plugin controller class'] = 'OSHATMGMTI18nStringSourcePluginController';
  $info['i18n_string']['ui controller class'] = 'OSHATMGMTI18nStringDefaultSourceUIController';
  $info['locale']['plugin controller class'] = 'OSHATMGMTLocaleSourcePluginController';
  $info['locale']['ui controller class'] = 'OSHATMGMTLocaleSourceUIController';
}

/**
 * Implements hook_entity_info_alter().
 */
function osha_tmgmt_entity_info_alter(&$entity_info) {
  if (isset($entity_info['tmgmt_job_item'])) {
    $entity_info['tmgmt_job_item']['views controller class'] = 'OshaTMGMTJobItemViewsController';
    $entity_info['tmgmt_job_item']['entity class'] = 'OshaTMGMTJobItem';
    $entity_info['tmgmt_job_item']['metadata controller class'] = 'OshaTMGMTJobItemMetadataController';
  }
  if (isset($entity_info['tmgmt_job'])) {
    $entity_info['tmgmt_job']['entity class'] = 'OshaTMGMTJob';
    $entity_info['tmgmt_job']['views controller class'] = 'OshaTMGMTJobViewsController';
    // Override tmgmt_job_access to allow 'Translator Liaison' to view the jobs.
    $entity_info['tmgmt_job']['access callback'] = 'osha_tmgmt_job_access';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hide unwanted translation sources tabs from tmgmt interface.
 */
function osha_tmgmt_menu_local_tasks_alter(&$items) {
  $disable = array(
    'admin/tmgmt/sources/i18n_string_taxonomy_term',
    'admin/tmgmt/sources/i18n_string_taxonomy_vocabulary',

    // 'admin/tmgmt/sources/entity_node',
    'admin/tmgmt/sources/i18n_string_field_instance',
    'admin/tmgmt/sources/i18n_string_field',
    'admin/tmgmt/sources/i18n_string_path_breadcrumbs',
    'admin/tmgmt/sources/i18n_string_menu',
    'admin/tmgmt/sources/entity_node',
    'admin/tmgmt/sources/i18n_string_block',
  );

  $weights = array(
    'admin/tmgmt/sources/osha' => 1,
    'admin/tmgmt/sources/entity_node' => 2,
    'admin/tmgmt/sources/i18n_string_block' => 3,
    'admin/tmgmt/sources/locale_default' => 10,
    'admin/tmgmt/sources/i18n_string_menu_link' => 5,
    'admin/tmgmt/sources/entity_taxonomy_term' => 6,
  );

  if (isset($items['tabs']['1']['output']) && is_array($items['tabs']['1']['output'])) {
    foreach ($items['tabs']['1']['output'] as $index => &$tab) {
      dpm($tab['#link']['path']);
      if (isset($tab['#link']['path']) && array_key_exists($tab['#link']['path'], $weights)) {
        $tab['#weight'] = $weights[$tab['#link']['path']];
      }
      if (isset($tab['#link']['path']) && in_array($tab['#link']['path'], $disable)) {
        $tab['#link']['access'] = FALSE;
        unset($items['tabs']['1']['output'][$index]);
      }
      // Change name from Locale => Literals.
      if (isset($tab['#link']['path']) && $tab['#link']['path'] == 'admin/tmgmt/sources/locale_default') {
        $tab['#link']['title'] = t('Literals');
      }
    }
  }
}

/**
 * Access callback for the job entity (overrides tmgmg_job_access).
 *
 * @param string $op
 *   The operation being performed.
 * @param object $job
 *   (Optional) A TMGMTJob entity to check access for. If no entity is given, it
 *   will be determined whether access is allowed for all entities.
 * @param object $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return bool
 *   TRUE if access is allowed, FALSE otherwise.
 */
function osha_tmgmt_job_access($op, $job = NULL, $account = NULL) {
  if ($op == 'view') {
    return user_access('view translation job', $account);
  }
  return tmgmt_job_access($op, $job, $account);
}

/**
 * Implements hook_preprocess_page().
 */
function osha_tmgmt_preprocess_page(&$variables) {
  // Hide legend help text.
  if ($_GET['q'] == 'admin/tmgmt/sources'
    || $_GET['q'] == 'admin/tmgmt/sources/osha') {
    if (isset($variables['page']['help']['system_help']['#markup'])) {
      $variables['page']['help']['system_help']['#markup'] = '';
    };
  }

  // Add some breadcrumbs.
  $l_home = l(t('Home'), '<front>');
  $l_admin = l(t('Administration'), 'admin');
  $l_translation = l(t('Translation'), 'admin/tmgmt');
  if (strpos($_GET['q'], 'admin/tmgmt/jobs/') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = l(t('Jobs'), 'admin/tmgmt/jobs');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/items/') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = l(t('Jobs'), 'admin/tmgmt/jobs');
    if (!empty($variables['page']['content']['system_main']['tmgmt_job_item'])) {
      $job_item = current($variables['page']['content']['system_main']['tmgmt_job_item']);
      $crumbs[] = $job_item['info']['job']['#markup'];
    }
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/sources') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Sources');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/cart') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Cart');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/content-validators') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Content validators');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Jobs');
    drupal_set_breadcrumb($crumbs);
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_tmgmt_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state) {
  list($id, $vid, $bundle) = entity_extract_ids($form_state['entity_type'], $form_state['entity']);
  $entity_language = entity_language($form_state['entity_type'], $form_state['entity']);
  $items = _osha_tmgmt_job_item_load_latest('entity', $form_state['entity_type'], $id, $entity_language);

  // PENDING TRANSLATIONS column.
  $pt_col_index = 4;
  // STATUS column
  $status_col_index = 3;
  unset($form['languages']['#header'][$status_col_index]);
  // Remove Operations Column.
  unset($form['languages']['#header'][5]);
  // Remove all previously disabled checkboxes - we override that.
  $languages = language_list();

  foreach (array_keys($languages) as $langcode) {
    // Reset the pending column and ordering, rebuild based on job item.
    unset($form['languages'][$langcode]);
    $form['languages']['#options'][$langcode][$pt_col_index] = t('None');
    // Remove Operations Column.
    unset($form['languages']['#options'][$langcode][5]);

    if (isset($items[$langcode])) {
      $item = $items[$langcode];
      $uri = $item->uri();
      $state = $item->state;
      $additional = l(_osha_tmgmt_get_job_item_state_label($state), $uri['path'], array('query' => array('destination' => current_path())));
      $form['languages']['#options'][$langcode][$pt_col_index] = $additional;
    }
    unset($form['languages']['#options'][$langcode][$status_col_index]);
  }

  // Hide button Add to cart if node not in published or ready to published.
//  if ($form_state['entity_type'] == 'node'
//    && !empty($form_state['entity']->workbench_moderation)) {
//    $add_to_cart_states = array(OSHA_WORKFLOW_STATE_PUBLISHED, OSHA_WORKFLOW_STATE_READY_TO_PUBLISH);
//    $current_state = $form_state['entity']->workbench_moderation['current']->state;
//    if (!in_array($current_state, $add_to_cart_states)) {
//      hide($form['top_actions']['add_to_cart']);
//    }
//  }

  $form['top_actions']['add_to_cart']['#value'] = t('Add to cart (full translation)');
  $form['top_actions']['add_to_cart']['#attributes']['operation'] = 'full_translation';
  $form['top_actions']['add_to_cart']['#submit'][] = 'osha_tmgmt_ui_source_add_to_cart_submit';

  $form['top_actions']['add_to_cart_retranslate']= array(
    '#type' => 'submit',
    '#value' => t('Add to cart (retranslation)'),
    '#submit' => array('tmgmt_ui_source_add_to_cart_submit', 'osha_tmgmt_ui_source_add_to_cart_submit'),
    '#weight' => -1,
    '#validate' => array(),
    '#attributes' => array(
      'title' => t('Add marked items to the cart for later processing'),
      'operation' => 'retranslation'
    ),
  );
  if (!empty($form['top_actions']['add_to_cart']['#disabled'])) {
    // if already in cart
    $form['top_actions']['add_to_cart_retranslate']['#disabled'] = $form['top_actions']['add_to_cart']['#disabled'];
  }

  // add re-translate validation button
  $form['top_actions']['retranslate_validate'] = array(
    '#type' => 'submit',
    '#value' => t('Validate retranslation'),
    '#submit' => array('osha_tmgmt_retranslate_validate_ui'),
    '#weight' => 1,
    '#prefix' => '<div>',
    '#suffix' => '</div>',
  );

  // Change from table select to table.
  $form['#validate'] = array();
  $form['languages']['#type'] = 'table';
  $form['languages']['#theme'] = 'table';
  $form['languages']['#rows'] = $form['languages']['#options'];
  hide($form['actions']);
}

/**
 * Submit callback for Add to cart
 */
function osha_tmgmt_ui_source_add_to_cart_submit($form, &$form_state) {
  if ($form_state['triggering_element']['#attributes']['operation'] == 'retranslation' && $form_state['tmgmt_cart']['item_type'] == 'node') {
    // tmgmt_job_item.retranslation
    $job_items = tmgmt_ui_cart_get()->getJobItemsFromCart();
    $job_item = end($job_items);
    if ($job_item && $job_item->item_id == $form_state['tmgmt_cart']['item_id']) {
      // check retranslation
      _osha_tmgmt_mark_job_item_retranslation($form_state['entity'], $job_item);
      $job_item->save();
    }
  }
}

/**
 * Submit callback for Validate retranslation
 */
function osha_tmgmt_retranslate_validate_ui($form, &$form_state) {
  $node = menu_get_object();
  $messages = array();
  $valid_languages = array();
  $invalid_languages = array();
  OshaTMGMTRetranslate::validate_can_retranslate($node, $messages, $valid_languages, $invalid_languages);
  foreach ($messages as $severity => $message_list) {
    foreach ($message_list as $message) {
      drupal_set_message($message, $severity);
    }
  }
  $details = array();
  foreach ($invalid_languages as $lang => $data) {
    $details[$lang] = sprintf("Different HTML at id = '%s', <%s> in %s, <%s> in %s",
      $data['id'],
      $data[$data['source']], strtoupper($data['source']),
      $data[$lang], strtoupper($lang));
  }
  if (!empty($details)) {
    drupal_set_message('<pre>'.htmlspecialchars(print_r($details, TRUE)).'</pre>', 'warning');
  }
}

/**
 * Callback for Filter job items function on Job overview page.
 *
 * Just rebuilds the form because the filters are passed to view
 * form form_state as contextual filters.
 */
function osha_tmgmt_tmgmt_job_form_filter_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}




/**
 *  Implements hook_tmgmt_source_translation_structure().
 */
function osha_tmgmt_tmgmt_source_translation_structure($job_item, $entity, $field, $instance, $items) {
  $structure = array();
  if (!empty($items)) {
    $field_name = $instance['field_name'];
    $structure['#label'] = check_plain($instance['label']);
    foreach ($items as $delta => $value) {
      switch ($field['type']) {
        /* don't translate images and files for the moment
        case 'image':
          if (!empty($value['alt'])) {
            $structure[$delta]['alt'] = array(
              '#label' => t('Image Alt Text'),
              '#text' => $value['alt'],
              '#translate' => TRUE,
            );
          }
          if (!empty($value['title'])) {
            $structure[$delta]['title'] = array(
              '#label' => t('Image Title Text'),
              '#text' => $value['title'],
              '#translate' => TRUE,
            );
          }
          break;
        case 'file':
          if (!empty($value['description'])) {
            $structure[$delta]['description'] = array(
              '#label' => t('File Description'),
              '#text' => $value['description'],
              '#translate' => TRUE,
            );
          }
          break;
        */
        case 'link_field':
          if (!empty($value['title'])) {
            $structure[$delta]['title'] = array(
              '#label' => t('Link Title Text'),
              '#text' => $value['title'],
              '#translate' => TRUE,
            );
          }
          if (!empty($value['url'])) {
            $structure[$delta]['url'] = array(
              '#label' => t('Link URL'),
              '#text' => $value['url'],
              '#translate' => FALSE,
            );
          }
          break;
        case 'text':
        case 'text_long':
        case 'text_with_summary':
          if ($job_item->item_type == 'node' && empty($job_item->is_full_translation)) {
            // Retranslation.
            $text = OshaTMGMTRetranslate::get_text_to_retranslate(
              $job_item->item_id, $entity->type,
              $job_item->source_language, $job_item->target_language,
              $field_name
            );
          } else {
            // This could be a taxonomy term or full translation was requested.
            $text = $value['value'];
          }
          $structure[$delta]['value'] = array(
            '#label' => $structure['#label'],
            '#text' => $text,
            '#translate' => TRUE,
          );
          if ($field['type'] == 'text_with_summary' && !empty($value['summary'])) {
            $structure[$delta]['summary'] = array(
              '#label' => t('Summary'),
              '#text' => $value['summary'],
              '#translate' => TRUE,
            );
          }
          break;
        default:
          return $structure;
      }

      $structure[$delta]['#label'] = t('Delta #@delta', array('@delta' => $delta));
      // Add format.
      $structure[$delta]['format'] = array(
        '#label' => '',
        '#text' => !empty($value['format']) ? $value['format'] : '',
        '#translate' => FALSE,
      );
    }
  }
  return $structure;
}
