<?php
/**
 * @file
 * Code for the OSHA Translation Management feature.
 */

include_once 'osha_tmgmt.features.inc';


define('OSHA_TMGMT_DEFAULT_SOURCE_LANGUAGE', 'en');
define('OSHA_TMGMT_DEFAULT_TARGET_LANGUAGE', 'ro');
define('OSHA_TMGMT_WORDS_PER_PAGE', 250);

define('OSHA_TMGMT_JOB_PRIORITY_HIGH', 2);
define('OSHA_TMGMT_JOB_PRIORITY_LOW', 1);
define('OSHA_TMGMT_JOB_PRIORITY_NORMAL', 0);

define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired', 5);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated', 6);
define('OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish', 7);

function osha_tmgmt_menu() {
  $items = array();
  $items['admin/config/content/osha_tmgmt'] = array(
    'title' => 'OSHA TMGMT',
    'description' => 'Configure OSHA TMGMT.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_tmgmt_config_form'),
    'access arguments' => array('administer osha tmgmt'),
    'file' => 'osha_tmgmt.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_schema_alter().
 */
function osha_tmgmt_schema_alter(&$schema) {
  if (isset($schema['tmgmt_job_item'])) {
    $schema['tmgmt_job_item']['fields']['target_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'not null' => FALSE,
      'description' => 'The language the data should be translated to.',
    );
    $schema['tmgmt_job_item']['fields']['source_language'] = array(
      'type' => 'varchar',
      'size' => 12,
      'default' => '',
      'not null' => FALSE,
      'description' => 'The default entity language',
    );
    $schema['tmgmt_job_item']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job_item']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job_item']['fields']['eid'] = array(
      'description' => 'Translation Validators groups',
      'type' => 'int',
      'unsigned' => TRUE,
      'default' => NULL,
      'not null' => FALSE,
    );

    $schema['tmgmt_job_item']['fields']['vid'] = array(
      'description' => 'Revision Translated',
      'type' => 'int',
      'unsigned' => TRUE,
      'default' => NULL,
      'not null' => FALSE,
    );
    $schema['tmgmt_job_item']['fields']['merged'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => NULL,
      'description' => 'If the translation was merged.',
    );
    $schema['foreign keys']['vid'] = array(
      'table' => 'node_revision',
      'columns' => array('vid' => 'vid'),
    );
    $schema['tmgmt_job_item']['fields']['is_full_translation'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 1,
      'description' => 'FALSE if retranslation, TRUE if full-translation.',
    );
  }
  if (isset($schema['tmgmt_job'])) {
    $schema['tmgmt_job']['fields']['character_count'] = array(
      'type' => 'int',
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of characters for this job',
    );
    $schema['tmgmt_job']['fields']['page_count'] = array(
      'type' => 'numeric',
      'precision' => 6,
      'scale' => 2,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Number of pages for this job',
    );
    $schema['tmgmt_job']['fields']['priority'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'Urgency of the translation (0=normal/1=high)',
    );
    $schema['tmgmt_job']['fields']['has_file_uploaded'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'If job item has file uploaded.',
    );
    $schema['tmgmt_job']['fields']['file_sent'] = array(
      'type' => 'int',
      'unsigned' => FALSE,
      'default' => 0,
      'not null' => TRUE,
      'description' => 'If job item translation file was sent to CDT.',
    );
  }
}


function osha_tmgmt_entity_property_info_alter(&$info) {
  $info['tmgmt_job_item']['properties']['state']['options list'] = 'osha_tmgmt_get_job_item_states';
  $info['tmgmt_job_item']['properties']['target_language'] = array(
    'label' => t("Job Item Target Language"),
    'type' => 'text',
    'description' => t("Job Item Target Language"),
    'options list' => 'entity_metadata_language_list',
    'setter callback' => 'entity_metadata_verbatim_set',
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'target_language',
  );
  $info['tmgmt_job']['properties']['has_file_uploaded'] = array(
    'label' => t("Has File uploaded"),
    'type' => 'boolean',
    'description' => t("If job has a file uploaded"),
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'has_file_uploaded',
  );
  $info['tmgmt_job']['properties']['file_sent'] = array(
    'label' => t("Has File Sent to CDT"),
    'type' => 'boolean',
    'description' => t("If job's file is sent to CDT."),
    'getter callback' => 'entity_property_verbatim_get',
    'entity views field' => TRUE,
    'schema field' => 'file_sent',
  );
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function osha_tmgmt_tmgmt_file_format_plugin_info() {
  return array(
    'xml' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
    'XML' => array(
      'label' => t('CDT XML file'),
      'plugin controller class' => 'OSHATranslatorFileformatCDT',
    ),
  );
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function osha_tmgmt_tmgmt_translator_plugin_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['plugin controller class'] = 'OSHATMGMTFileTranslatorPluginController';
  }
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function osha_tmgmt_tmgmt_source_plugin_info_alter(&$info) {
  $info['entity']['plugin controller class'] = 'OSHATMGMTEntitySourcePluginController';
  $info['entity']['ui controller class'] = 'OSHATMGMTEntitySourceUIController';
  $info['i18n_string']['plugin controller class'] = 'OSHATMGMTI18nStringSourcePluginController';
  $info['i18n_string']['ui controller class'] = 'OSHATMGMTI18nStringDefaultSourceUIController';
  $info['locale']['plugin controller class'] = 'OSHATMGMTLocaleSourcePluginController';
  $info['locale']['ui controller class'] = 'OSHATMGMTLocaleSourceUIController';
}

/**
 * Implements hook_entity_info_alter().
 */
function osha_tmgmt_entity_info_alter(&$entity_info) {
  if (isset($entity_info['tmgmt_job_item'])) {
    $entity_info['tmgmt_job_item']['views controller class'] = 'OshaTMGMTJobItemViewsController';
    $entity_info['tmgmt_job_item']['entity class'] = 'OshaTMGMTJobItem';
    $entity_info['tmgmt_job_item']['metadata controller class'] = 'OshaTMGMTJobItemMetadataController';
  }
  if (isset($entity_info['tmgmt_job'])) {
    $entity_info['tmgmt_job']['entity class'] = 'OshaTMGMTJob';
    $entity_info['tmgmt_job']['views controller class'] = 'OshaTMGMTJobViewsController';
    // Override tmgmt_job_access to allow 'Translator Liaison' to view the jobs.
    $entity_info['tmgmt_job']['access callback'] = 'osha_tmgmt_job_access';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hide unwanted translation sources tabs from tmgmt interface.
 */
function osha_tmgmt_menu_local_tasks_alter(&$items) {
  $disable = array(
    'admin/tmgmt/sources/i18n_string_taxonomy_term',
    'admin/tmgmt/sources/i18n_string_taxonomy_vocabulary',

    //'admin/tmgmt/sources/entity_node',
    'admin/tmgmt/sources/i18n_string_field_instance',
    'admin/tmgmt/sources/i18n_string_field',
    'admin/tmgmt/sources/i18n_string_path_breadcrumbs',
    'admin/tmgmt/sources/i18n_string_menu',
    'admin/tmgmt/sources/entity_node',
    'admin/tmgmt/sources/i18n_string_block',
  );

  $weights = array(
    'admin/tmgmt/sources/osha' => 1,
    'admin/tmgmt/sources/entity_node' => 2,
    'admin/tmgmt/sources/i18n_string_block' => 3,
    'admin/tmgmt/sources/locale_default' => 10,
    'admin/tmgmt/sources/i18n_string_menu_link' => 5,
    'admin/tmgmt/sources/entity_taxonomy_term' => 6,
  );

  if (isset($items['tabs']['1']['output']) && is_array($items['tabs']['1']['output'])) {
    foreach ($items['tabs']['1']['output'] as $index => &$tab) {
      if (isset($tab['#link']['path'])
        && array_key_exists($tab['#link']['path'], $weights)) {
        $tab['#weight'] = $weights[$tab['#link']['path']];
      }
      if (isset($tab['#link']['path'])
        && in_array($tab['#link']['path'], $disable)) {
        $tab['#link']['access'] = FALSE;
        unset($items['tabs']['1']['output'][$index]);
      }
      // Change name from Locale => Literals.
      if (isset($tab['#link']['path']) && $tab['#link']['path'] == 'admin/tmgmt/sources/locale_default') {
        $tab['#link']['title'] = t('Literals');
      }
    }
  }
}

/**
 * Access callback for the job entity (overrides tmgmg_job_access).
 *
 * @param string $op
 *   The operation being performed.
 * @param object $job
 *   (Optional) A TMGMTJob entity to check access for. If no entity is given, it
 *   will be determined whether access is allowed for all entities.
 * @param object $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return bool
 *   TRUE if access is allowed, FALSE otherwise.
 */
function osha_tmgmt_job_access($op, $job = NULL, $account = NULL) {
  if ($op == 'view') {
    return user_access('view translation job', $account);
  }
  return tmgmt_job_access($op, $job, $account);
}

/**
 * Implements hook_preprocess_page().
 */
function osha_tmgmt_preprocess_page(&$variables) {
  // Hide legend help text.
  if ($_GET['q'] == 'admin/tmgmt/sources'
    || $_GET['q'] == 'admin/tmgmt/sources/osha') {
    if (isset($variables['page']['help']['system_help']['#markup'])) {
      $variables['page']['help']['system_help']['#markup'] = '';
    };
  }

  // Add some breadcrumbs.
  $l_home = l(t('Home'), '<front>');
  $l_admin = l(t('Administration'), 'admin');
  $l_translation = l(t('Translation'), 'admin/tmgmt');
  if (strpos($_GET['q'], 'admin/tmgmt/jobs/') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = l(t('Jobs'), 'admin/tmgmt/jobs');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/items/') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = l(t('Jobs'), 'admin/tmgmt/jobs');
    if (!empty($variables['page']['content']['system_main']['tmgmt_job_item'])) {
      $job_item = current($variables['page']['content']['system_main']['tmgmt_job_item']);
      $crumbs[] = $job_item['info']['job']['#markup'];
    }
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/sources') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Sources');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/cart') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Cart');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt/content-validators') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Content validators');
    drupal_set_breadcrumb($crumbs);
    return;
  }
  if (strpos($_GET['q'], 'admin/tmgmt') === 0) {
    $crumbs = array();
    $crumbs[] = $l_home;
    $crumbs[] = $l_admin;
    $crumbs[] = $l_translation;
    $crumbs[] = t('Jobs');
    drupal_set_breadcrumb($crumbs);
    return;
  }
}


/**
 *  Implements hook_tmgmt_source_translation_structure().
 */
function osha_tmgmt_tmgmt_source_translation_structure($job_item, $entity, $field, $instance, $items) {
  $structure = array();
  if (!empty($items)) {
    $field_name = $instance['field_name'];
    $structure['#label'] = check_plain($instance['label']);
    foreach ($items as $delta => $value) {
      switch ($field['type']) {
        /* don't translate images and files for the moment
        case 'image':
          if (!empty($value['alt'])) {
            $structure[$delta]['alt'] = array(
              '#label' => t('Image Alt Text'),
              '#text' => $value['alt'],
              '#translate' => TRUE,
            );
          }
          if (!empty($value['title'])) {
            $structure[$delta]['title'] = array(
              '#label' => t('Image Title Text'),
              '#text' => $value['title'],
              '#translate' => TRUE,
            );
          }
          break;
        case 'file':
          if (!empty($value['description'])) {
            $structure[$delta]['description'] = array(
              '#label' => t('File Description'),
              '#text' => $value['description'],
              '#translate' => TRUE,
            );
          }
          break;
        */
        case 'link_field':
          if (!empty($value['title'])) {
            $structure[$delta]['title'] = array(
              '#label' => t('Link Title Text'),
              '#text' => $value['title'],
              '#translate' => TRUE,
            );
          }
          if (!empty($value['url'])) {
            $structure[$delta]['url'] = array(
              '#label' => t('Link URL'),
              '#text' => $value['url'],
              '#translate' => FALSE,
            );
          }
          break;
        case 'text':
        case 'text_long':
        case 'text_with_summary':
          if ($job_item->item_type == 'node' && empty($job_item->is_full_translation)) {
            // Retranslation.
            $text = OshaTMGMTRetranslate::get_text_to_retranslate(
              $job_item->item_id, $entity->type,
              $job_item->source_language, $job_item->target_language,
              $field_name
            );
          } else {
            // This could be a taxonomy term or full translation was requested.
            $text = $value['value'];
          }
          $structure[$delta]['value'] = array(
            '#label' => $structure['#label'],
            '#text' => $text,
            '#translate' => TRUE,
          );
          if ($field['type'] == 'text_with_summary' && !empty($value['summary'])) {
            $structure[$delta]['summary'] = array(
              '#label' => t('Summary'),
              '#text' => $value['summary'],
              '#translate' => TRUE,
            );
          }
          break;
        default:
          return $structure;
      }

      $structure[$delta]['#label'] = t('Delta #@delta', array('@delta' => $delta));
      // Add format.
      $structure[$delta]['format'] = array(
        '#label' => '',
        '#text' => !empty($value['format']) ? $value['format'] : '',
        '#translate' => FALSE,
      );
    }
  }
  return $structure;
}

/**
 * Returns the number of JobItems with a state for a Job
 * @param OshaTMGMTJob $job
 * @param $state
 *
 * @return int
 */
function osha_tmgmt_job_statistic_items(OshaTMGMTJob $job, $state) {
  $statistics = osha_tmgmt_job_statistics_items_load(array($job->tjid));
  if (!empty($statistics[$state][$job->tjid])) {
    return $statistics[$state][$job->tjid];
  }
  return 0;
}

/**
 * Returns the number of Job's Job Items for each state.
 * Keyed by state and tjid.
 * @param $tjids
 *
 * @return array
 */
function osha_tmgmt_job_statistics_items_load($tjids) {
  $statistics = &drupal_static(__FUNCTION__, array());

  // First try to get the values from the cache.
  $return = array();
  $tjids_to_load = array();
  foreach ($tjids as $tjid) {
    if (isset($statistics[$tjid])) {
      // Info exists in cache, get it from there.
      $return[$tjid] = $statistics[$tjid];
    }
    else {
      // Info doesn't exist in cache, add job to the list that needs to be
      // fetched.
      $tjids_to_load[] = $tjid;
    }
  }

  // If there are remaining jobs, build a query to fetch them.
  if (!empty($tjids_to_load)) {
    // Build the query to fetch the statistics.
    $query = db_select('tmgmt_job_item', 'tji')
      ->fields('tji', array('tjid', 'state'));
    $query->addExpression('count(tjiid)', 'count');
    $result = $query->groupBy('tjid')
      ->groupBy('state')
      ->condition('tjid', $tjids_to_load)
      ->execute();
    $stats = $result->fetchAll();
    // Key by [state][tjid].
    foreach ($stats as $row) {
      $return[$row->state][$row->tjid] = $row->count;
    }
  }
  return $return;
}

function osha_tmgmt_get_job_item_states() {
  return array(
    TMGMT_JOB_ITEM_STATE_ACTIVE => t('On Translation'),
    TMGMT_JOB_ITEM_STATE_REVIEW => t('Translated'), // was: Layout Validated
    OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidationRequired => t('Content Validation Required'),
    TMGMT_JOB_ITEM_STATE_ABORTED => t('Translation Rejected'),
    OSHA_TMGMT_JOB_ITEM_STATE_TranslationValidated => t('Translation Validated'),
    OSHA_TMGMT_JOB_ITEM_STATE_TranslatedReadyToPublish => t('Translated Ready to Publish'),
    TMGMT_JOB_ITEM_STATE_ACCEPTED => t('Published'),
  );
}

/**
 * Get language list as options.
 */
function osha_tmgmt_get_language_list() {
  $languages = language_list();
  drupal_alter('osha_tmgmt_get_language_list', $languages);
  $options = array();
  foreach ($languages as $lang_code => $language) {
    $options[$lang_code] = $language->name;
  }
  return $options;
}